<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bjp.dao.StudentDao"><!--这边是接口的全限定名称-->

    <!--id 是对应的namespace中的方法名
         parameterType ： dao接口中方法参数的数据类型。
        parameterType它的值是java的数据类型全限定名称或者是mybatis定义的别名
        例如：parameterType="java.lang.Integer"
             parameterType="int"

        注意：parameterType不是强制的，mybatis通过反射机制能够发现接口参数的数类型。
        所以可以没有。 一般我们也不写。

        使用#{}之后， mybatis执行sql是使用的jdbc中的PreparedStatement对象
        由mybatis执行下面的代码：
         1. mybatis创建Connection ， PreparedStatement对象
            String sql="select id,name, email,age from student where id=?";
            PreparedStatement pst = conn.preparedStatement(sql);
            pst.setInt(1,1001);

         2. 执行sql封装为resultType="com.bjpowernode.domain.Student"这个对象
            ResultSet rs = ps.executeQuery();
            Student student = null;
            while(rs.next()){
               //从数据库取表的一行数据， 存到一个java对象属性中
               student = new Student();
               student.setId(rs.getInt("id));
               student.setName(rs.getString("name"));
               student.setEmail(rs.getString("email"));
               student.setAge(rs.getInt("age"));
            }

           return student;  //给了dao方法调用的返回值
    -->
    <select id="selectStudentById" parameterType="java.lang.Integer" resultType="com.bjp.domain.Student"><!--这边还有别名可以用-->
        select id, name, email, age from springdb.student where id=#{studentId};
   </select>

    <select id="selectMultiParam" resultType="com.bjp.domain.Student">
        select id, name, email, age from springdb.student where name=#{myname} or age=#{myage};
    </select>






</mapper>